@model DashboardViewModel
@using Newtonsoft.Json

@{
    ViewData["Title"] = "My Dashboard";

    var chartJson = JsonConvert.SerializeObject(
        Model.StockData,
        Formatting.None, new JsonSerializerSettings()
        {
          NullValueHandling = NullValueHandling.Ignore
        });
}

<section class="dashboard">
  <div class="block-heading">
    <h2 class="text-info">Dashboard</h2>
  </div>

  <div class="block-content">
    <div class="container">
      <div class="row">
        @foreach (var stock in Model.StockData)
        {
          <div class="d-flex col-xs-12 col-sm-6 col-md-4 col-lg-3 mb-4">
            <div class="card w-100" data-symbol="@stock.Key">
              <div class="chart card-img-top"></div>
              <div class="card-body">
                <h5 class="card-title">
                  @stock.Value.Company.CompanyName (@stock.Key)
                </h5>
                <div style="height: 50px;">
                </div>
                <div class="stock-price">
                  <h4 class="text-right">@stock.Value.Quote.LatestPrice.ToString("C2")</h4>
                  <p class="card-text text-right">
                    @if (stock.Value.Quote.Change > 0)
                    {
                      <span class="text-success">
                        +@stock.Value.Quote.Change.ToString("C2")
                        (@stock.Value.Quote.ChangePercent.ToString("P1"))
                        <i class="fas fa-arrow-up"></i>
                      </span>
                    }
                    else
                    {
                      <span class="text-danger">
                        @stock.Value.Quote.Change.ToString("C2")
                        (@stock.Value.Quote.ChangePercent.ToString("P1"))
                        <i class="fas fa-arrow-down"></i>
                      </span>
                    }
                  </p>
                </div>
              </div>
              <div class="card-footer pb-1 pt-1">
                <a href="/quotes?symbol=@stock.Key&range=1m" class="more-details btn btn-link">Details</a>
              </div>
            </div>
          </div>
        }
      </div>
    </div>
  </div>
</section>

@section Head {
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css">
  <style>
    .stock-price {
      position: absolute;
      bottom: 60px;
      right: 1rem;
    }

    .chart {
      padding-top: .5rem;
      height: 125px;
      width: 100%;
    }

    .ct-series-a .ct-line {
      /* Set the colour of this series line */
      stroke: #3b99e0;
      /* Control the thikness of your lines */
      stroke-width: 2px;
    }

    .ct-series-a .ct-area {
      fill: lightblue;
    }
  </style>
}

@section Scripts {
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
  <script src="https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js"></script>
  <script>
    var chartData = @Html.Raw(chartJson);

    for (var symbol in chartData) {
      var element = "div.card[data-symbol='" + symbol + "'] .chart";
      var data = chartData[symbol].Chart.map(function (item) {
        return {
          x: new Date(item.Date),
          y: item.Close
        };
      });
      new Chartist.Line(element, {
        series: [
          {
            name: symbol,
            data: data
          }
        ]
      }, {
        showPoint: false,
        showArea: true,
        axisX: {
          type: Chartist.FixedScaleAxis,
          divisor: 5,
          labelInterpolationFnc: function (value) {
            return moment(value).format("M/D");
          }
        }
      });
    }
  </script>
}